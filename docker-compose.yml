version: "3.9"

services:
  db:
    image: postgres:16-alpine
    restart: always
    env_file:
      - ./config/db.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  influxdb:
    image: influxdb:2.7
    restart: always
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    env_file:
      - ./config/influxdb.env

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    env_file:
      - ./config/redis.env
    command: ["redis-server", "--requirepass", "$${REDIS_PASSWORD}"]

  cms-backend:
    build: ./cms-backend   # proyecto en Node.js
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - ./config/cms.env
    ports:
      - "8000:8000"
    volumes:
      - ./cms-backend:/app
    command: npm run start:dev

  microservices-backend:
    build: ./microservices-backend   # FastAPI
    restart: always
    depends_on:
      - influxdb
      - redis
    env_file:
      - ./config/microservices.env
    ports:
      - "9000:9000"
    volumes:
      - ./microservices-backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 9000 --reload

  frontend:
    build: ./frontend   # Next.js
    restart: always
    depends_on:
      - cms-backend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/usr/src/app
    command: sh -c "npm install && npm run dev"

volumes:
  postgres_data:
  influxdb_data:
